AWSTemplateFormatVersion: 2010-09-09

Description: >-
  Create Ansible Server.

Parameters:

  UserName:
    Type: String
    Default: e91user

  SSHPublicKey:
    Type: String
    Default: INSERT YOUR PUBLIC SSH KEY HER (start ssh-rsa AAA....)

  Subnet:
    Description: Subnet to host the EC2
    Type: 'AWS::EC2::Subnet::Id'
    ConstraintDescription: subnet where this machine reside

  vpcid:
    Description: VPC of the launcher and its security group
    Type: 'AWS::EC2::VPC::Id'
    ConstraintDescription: must be a VPC  where the SG and the launcher reside

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.

  AMI:
    Description: AMI to create the EC2, you can use amazon ami
    Type: String
    Default: ami-0e1fe1fee170f9a98

Resources:

  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      SubnetId: !Ref Subnet
      SecurityGroupIds: 
        - !Ref SSHANDWEB
      Tags:
        - 
          Key: Name
          Value: 'Ansible Server'
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -xe
              adduser ${USERNAME}
              echo ${USERNAME} 'ALL=(ALL) NOPASSWD:ALL'>>/etc/sudoers.d/${USERNAME}
              mkdir /home/${USERNAME}/.ssh
              echo ${SSHKEY} > /home/${USERNAME}/.ssh/authorized_keys
              chown -R ${USERNAME}.${USERNAME} /home/${USERNAME}/.ssh
              chmod 700 /home/${USERNAME}/.ssh
              chmod 600 /home/${USERNAME}/.ssh/authorized_keys
              hostnamectl set-hostname  ec2_1.harvard.edu --pretty
              hostnamectl set-hostname  ec2_1.harvard.edu --static
            - USERNAME: !Ref UserName
              SSHKEY: !Ref SSHPublicKey

  SSHANDWEB:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: cscie91-assign3-sg1-weball
      VpcId: !Ref vpcid 
      GroupDescription: port 22 (for ssh), port 80 and port 443 are open to the internet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

              
Outputs:
  InstanceId1:
    Description: InstanceId of the first instance
    Value: !Ref EC2Instance
  PublicIp:
    Description: Server Public IP
    Value: !GetAtt EC2Instance.PublicIp
